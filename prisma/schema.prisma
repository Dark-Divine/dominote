generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  targetActivities Activity[]        @relation("TargetUser")
  activities       Activity[]
  memberBoards     BoardMember[]
  sentInvitations  Invitation[]      @relation("UserToInvitation")
  labels           Label[]
  Note             Note?
  sessions         Session[]
  createdTasks     Task[]            @relation("CreatedByRelation")
  assignedTasks    TaskAssignment[]  @relation("UserAssignments")
  Workspace        Workspace?
  WorkspaceMember  WorkspaceMember[]
  favoriteBoards   Board[]           @relation("favorites")
}

model Workspace {
  userId          String            @id
  title           String
  createdAt       DateTime          @default(now())
  Board           Board[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkspaceMember WorkspaceMember[]
}

model WorkspaceMember {
  userId      String
  workspaceId String
  role        Role
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [userId], onDelete: Cascade)

  @@id([userId, workspaceId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Note {
  userId String @id
  title  String
  text   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BoardMember {
  userId    String
  boardId   String
  createdAt DateTime @default(now())
  role      Role
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, boardId])
}

model Board {
  id              String        @id @default(cuid())
  title           String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  backgroundUrl   String?
  workspaceUserId String?
  activities      Activity[]
  Workspace       Workspace?    @relation(fields: [workspaceUserId], references: [userId])
  members         BoardMember[]
  columns         Column[]
  invitations     Invitation[]
  labels          Label[]
  favoritedBy     User[]        @relation("favorites")
}

model Column {
  id                         String     @id @default(cuid())
  title                      String
  boardId                    String
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
  order                      Int
  activitiesAsNewColumn      Activity[] @relation("NewColumn")
  activitiesAsOldColumn      Activity[] @relation("OldColumn")
  activitiesAsOriginalColumn Activity[] @relation("OriginalColumn")
  board                      Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks                      Task[]
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String?
  dueDate         DateTime?
  columnId        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  order           Int
  startDate       DateTime?
  createdByUserId String
  coverImage      String?
  activities      Activity[]
  checklists      Checklist[]
  column          Column           @relation(fields: [columnId], references: [id], onDelete: Cascade)
  createdBy       User             @relation("CreatedByRelation", fields: [createdByUserId], references: [id], onDelete: Cascade)
  assignedUsers   TaskAssignment[] @relation("TaskAssignments")
  labels          Label[]          @relation("LabelToTask")
}

model TaskAssignment {
  userId String
  taskId String
  task   Task   @relation("TaskAssignments", fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation("UserAssignments", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, taskId])
}

model Invitation {
  id        String   @id @default(cuid())
  boardId   String
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  inviterId String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  inviter   User     @relation("UserToInvitation", fields: [inviterId], references: [id], onDelete: Cascade)

  @@unique([boardId, email])
}

model Label {
  id        String  @id @default(cuid())
  color     String
  userId    String
  boardId   String
  isDefault Boolean @default(false)
  title     String?
  board     Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]  @relation("LabelToTask")
}

model Checklist {
  id     String          @id @default(cuid())
  title  String?
  taskId String
  task   Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  items  ChecklistItem[]
}

model ChecklistItem {
  id          String    @id @default(cuid())
  content     String
  isChecked   Boolean   @default(false)
  checklistId String
  createdAt   DateTime  @default(now())
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
}

model Activity {
  id               String       @id @default(cuid())
  type             ActivityType
  content          String?
  createdAt        DateTime     @default(now())
  userId           String
  taskId           String?
  boardId          String?
  newColumnId      String?
  oldColumnId      String?
  originalColumnId String?
  dueDate          DateTime?
  startDate        DateTime?
  targetUserId     String?
  board            Board?       @relation(fields: [boardId], references: [id], onDelete: Cascade)
  newColumn        Column?      @relation("NewColumn", fields: [newColumnId], references: [id])
  oldColumn        Column?      @relation("OldColumn", fields: [oldColumnId], references: [id])
  originalColumn   Column?      @relation("OriginalColumn", fields: [originalColumnId], references: [id])
  targetUser       User?        @relation("TargetUser", fields: [targetUserId], references: [id])
  task             Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  member
  owner
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  COMMENT_ADDED
  BOARD_UPDATED
  TASK_MOVED
  START_DATE_ADDED
  START_DATE_UPDATED
  START_DATE_REMOVED
  DUE_DATE_ADDED
  DUE_DATE_UPDATED
  DUE_DATE_REMOVED
  TASK_ASSIGNED
  TASK_UNASSIGNED
}
